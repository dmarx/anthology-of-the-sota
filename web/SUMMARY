================================================================================
File: web/index.html
================================================================================
<!-- File: web/index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Machine Learning Recommendations</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash/4.17.21/lodash.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.1.0/js-yaml.min.js"></script>
    <link rel="stylesheet" href="styles/main.css">
</head>
<body>
    <div class="page-header">
        <h1>Machine Learning Recommendations</h1>
        
        <div class="view-controls">
            <button onclick="setView('grid')">Grid View</button>
            <button onclick="setView('table')">Table View</button>
            
            <div id="activeFilters" class="filters">
            </div>
        </div>
    </div>

    <div id="recommendations" class="recommendation-grid hidden"></div>
    <div id="recommendationsTable" class="table-container"></div>

    <script src="scripts/main.js"></script>
</body>
</html>



================================================================================
File: web/scripts/main.js
================================================================================
// File: web/scripts/main.js
let recommendations = [];
let currentView = 'grid';
let currentSort = {
    column: 'topic',
    direction: 'asc'
};

async function loadData() {
    try {
        const response = await fetch('./data/registry.yaml');
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const yamlText = await response.text();
        const data = jsyaml.load(yamlText);
        if (!data || !data.recommendations) {
            throw new Error('Invalid data format');
        }
        recommendations = data.recommendations;
        renderView();
    } catch (error) {
        console.error('Error loading data:', error);
        document.getElementById('recommendations').innerHTML = '<div class="error">Error loading recommendations</div>';
        document.getElementById('recommendationsTable').innerHTML = '<div class="error">Error loading recommendations</div>';
    }
}

function formatSource(source) {
    return `${source.first_author} et al. (${source.year})`;
}

function renderGrid() {
    const grid = document.getElementById('recommendations');
    if (!recommendations || recommendations.length === 0) {
        grid.innerHTML = '<div>No recommendations available</div>';
        return;
    }
    
    grid.innerHTML = recommendations
        .map(rec => `
            <div class="recommendation-card">
                <h3>${rec.topic}</h3>
                <p>${rec.recommendation}</p>
                <div>Status: ${rec.status}</div>
                <div>Source: ${formatSource(rec.source)}</div>
                ${rec.source.arxiv_id ? 
                    `<div>arXiv: <a href="https://arxiv.org/abs/${rec.source.arxiv_id}" target="_blank">${rec.source.arxiv_id}</a></div>` 
                    : ''}
            </div>
        `).join('');
}

function renderTable() {
    const table = document.getElementById('recommendationsTable');
    if (!recommendations || recommendations.length === 0) {
        table.innerHTML = '<div>No recommendations available</div>';
        return;
    }

    table.innerHTML = `
        <table>
            <thead>
                <tr>
                    <th onclick="sortBy('topic')">Topic ${getSortIndicator('topic')}</th>
                    <th onclick="sortBy('recommendation')">Recommendation ${getSortIndicator('recommendation')}</th>
                    <th onclick="sortBy('status')">Status ${getSortIndicator('status')}</th>
                    <th>Source</th>
                </tr>
            </thead>
            <tbody>
                ${recommendations.map(rec => `
                    <tr>
                        <td>${rec.topic}</td>
                        <td>${rec.recommendation}</td>
                        <td>${rec.status}</td>
                        <td>
                            ${formatSource(rec.source)}
                            ${rec.source.arxiv_id ? 
                                `<br><a href="https://arxiv.org/abs/${rec.source.arxiv_id}" target="_blank">arXiv:${rec.source.arxiv_id}</a>` 
                                : ''}
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

function sortBy(column) {
    if (currentSort.column === column) {
        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
    } else {
        currentSort = { column, direction: 'asc' };
    }
    
    recommendations = _.orderBy(
        recommendations,
        [column],
        [currentSort.direction]
    );
    
    renderView();
}

function getSortIndicator(column) {
    if (currentSort.column !== column) return '↕';
    return currentSort.direction === 'asc' ? '↑' : '↓';
}

function setView(view) {
    currentView = view;
    document.getElementById('recommendations').classList.toggle('hidden', view !== 'grid');
    document.getElementById('recommendationsTable').classList.toggle('hidden', view !== 'table');
    renderView();
}

function renderView() {
    if (currentView === 'grid') {
        renderGrid();
    } else {
        renderTable();
    }
}

// Initialize
loadData();



================================================================================
File: web/styles/main.css
================================================================================
/* File: frontend-html/styles/main.css */
body {
    font-family: system-ui, -apple-system, sans-serif;
    line-height: 1.5;
    margin: 0;
    padding: 20px;
}

.page-header {
    margin-bottom: 2rem;
}

.view-controls {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
}

.filters {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
}

.recommendation-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
}

.recommendation-card {
    border: 1px solid #ddd;
    padding: 1rem;
    border-radius: 4px;
}

.table-container {
    width: 100%;
    overflow-x: auto;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    padding: 0.5rem;
    text-align: left;
    border-bottom: 1px solid #ddd;
}

th {
    background: #f5f5f5;
    cursor: pointer;
}

.hidden {
    display: none;
}

.sort-indicator {
    color: #999;
}

.error {
    color: #721c24;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    padding: 1rem;
    margin: 1rem 0;
    border-radius: 4px;
}


